class player
{
public:
	string name;//名字 
    int val;//用来控制下落速度
    int sco;//用来存储得分
    int cp;//用来存储关卡
	int times;
	bool ck;//检查方块还能不能下落
	map m;//地图
    block bA;//候选区方块 
    block bB;//下落中方块
	
	void getp(int X,int Y,int xa,int ya,int xb,int yb,int v,string na)
	{
		bA.getp(xa,ya,bs[0]);
		bB.getp(xb,yb,bs[0]);
		name=na;
		times=val=v;//50较慢，5较快 
		ck=true;
    	sco=0;
		cp=1;
		m.getp(X,Y);
	}
	
	bool collision(int x,int y,int b[4][4],map m)//检测碰撞
	{
		for(i=0;i<4;i++)
		for(j=0;j<4;j++)
		if(x+i>=m.x&&y+j>=m.y&&m.m[x+i-m.x][y+j-m.y]==1&&b[i][j]==1)
		return false;
		return true;
	}
	
	void Left()//左移
	{
	    if(collision(bB.x,bB.y-1,bB.b,m))
	    {
	        bB.clear();
	        --bB.y;
	    }
	}
	
	void Right()//右移
	{
	    if(collision(bB.x,bB.y+1,bB.b,m))
	    {
	        bB.clear();
	        ++bB.y;
	    }
	}
	
	void Up()//顺时针旋转90度
	{
		int h=0;
	    switch(bB.b[0][0])
	    {
	    case 10:h=1;break;
	    case 11:h=0;break;
	    case 12:h=3;break;
	    case 13:h=4;break;
	    case 14:h=5;break;
	    case 15:h=2;break;
	    case 16:h=7;break;
	    case 17:h=8;break;
	    case 18:h=9;break;
	    case 19:h=6;break;
	    case 20:h=11;break;
	    case 21:h=10;break;
	    case 22:h=13;break;
		case 23:h=12;break;
	    case 24:h=15;break;
	    case 25:h=16;break;
	    case 26:h=17;break;
	    case 27:h=14;break;
	    default:
			break;
	    }
	    if(collision(bB.x,bB.y,bs[h],m))
	    {
	        bB.clear();
	        memcpy(bB.b,bs[h],64);
	    }
	}
	
	int Down()//加速下落	
	{
	    if(collision(bB.x+1,bB.y,bB.b,m))
	    {
	        bB.clear();
	        ++bB.x;
	        return 0;
	    }
	    if(bB.x<0) return 2;
	    for(i=0;i<4;i++)
	    for(j=0;j<4;j++)
	    if(bB.b[i][j]==1)
	    {
	        m.m[bB.x+i-m.x][bB.y+j-m.y]=1;
	        SCT(hOut,FBLU|FGRE|FRED|FINT);
	        gotoXY(2*(bB.y+j),bB.x+i,"■");
	    }
	    return 1;
	}
	
	void roundBlock()//随机生成方块并打印到下一个方块位置
	{
	    bA.clear();
	    int k=rand()%19;
		memcpy(bA.b,bs[k],64);
	    bA.print();
	}

	void Stop()//游戏暂停 
	{
	    SCT(hOut,FRED|FINT);gotoXY(34,17,"游戏暂停");
	    while(true)
	    {
	    	int x=0;
	        char key=getch();
	        if(key==32)
	        {
	            gotoXY(34,17,"        ");
	    		x=1;
	        }
	        if(key==27) exit(0);
	        if(x==1) break;
	    }
	}
	
	int eli()//判断是否能消行并更新分值
	{
	    SCT(hOut,FBLU|FGRE|FRED|FINT);
	    int k=0;
		for(i=19;i>=0;i--)
	    {
	        int x=0;
	        for(j=1;j<11;j++) if(m.m[i][j]==0) break;
			if(j==11) x=1;
	        if(x==1)
	        {
	        	//更新分数关卡 
	            sco+=100;
	            if(val>5&&(sco/1000+1)!=cp)
	            {
	                cp=sco/1000+1;
	                val-=5;
	            }
	            //更新地图界面 
	            for(int l=i;l>0;l--) 
	            for(int n=1;n<11;n++)
	            m.m[l][n]=m.m[l-1][n];
	            for(int l=i;l>0;l--)
		        for(int n=1;n<11;n++)
		        {
		            gotoxy(2*(n+m.y),l+m.x);
	                if(m.m[l][n]==1) cout << "■";
	                else cout << "  ";
	            }
	            i++;
				k++;
	        }
	    }
	    gotoxy(36+m.y/2,2);cout<<sco;
	    gotoxy(36+m.y/2,3);cout<<cp;
	    return k;
	}

	void ali()//底部增行 
	{
		for(i=0;i<19;i++) 
	    for(j=1;j<11;j++)
	    m.m[i][j]=m.m[i+1][j];
	    for(i=0;i<19;i++) 
	    for(j=1;j<11;j++)
	    {
	        gotoxy(2*j+m.y*2,i);
	        if(m.m[i][j]==1) cout << "■";
	        else cout << "  ";
	    }
	    for(j=1;j<11;j++)//增行 
	    {
	    	gotoxy(2*j+m.y*2,i);
	    	int k=rand()%100;
	    	m.m[i][j]=k>40?1:0;
	    	if(k>40) cout << "■";
			else cout << "  ";
		}
	}

	void gameOver()//游戏结束
	{
	    SCT(hOut,FRED|FINT);
	    gotoxy(34,17);cout<<name<<"失败";
    	gotoXY(34,18,"空格键：重来");
    	gotoXY(34,19,"Esc键 ：退出");
	    while(true)
	    {
	        char key= _getch();
	        if (key == 32) return;
	        if (key == 27) exit(0);
	    }
	}
	
};
