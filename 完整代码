#include<iostream>
#include<string>
#include<ctime>
#include<cstdlib>
#include<windows.h>
#include<conio.h>
#define SCT SetConsoleTextAttribute
#define FRED FOREGROUND_RED
#define FGRE FOREGROUND_GREEN
#define FBLU FOREGROUND_BLUE
#define FINT FOREGROUND_INTENSITY

using namespace std;

void gotoxy(int x, int y);//移动光标
void gotoXY(int x, int y,string s1);
void initialWindow();//初始化窗口
void initialPrint();//初始化界面
HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);//获取标准输出设备句柄
int bs[19][4][4]=//19种基本方块,首位是特征数字 
{
	{ { 10,0,0,0 },{ 1,1,1,1 },{ 0,0,0,0 },{ 0,0,0,0 } },
	{ { 11,0,1,0 },{ 0,0,1,0 },{ 0,0,1,0 },{ 0,0,1,0 } },
	{ { 12,0,0,0 },{ 0,0,0,0 },{ 1,1,1,0 },{ 1,0,0,0 } },
	{ { 13,0,0,0 },{ 1,1,0,0 },{ 0,1,0,0 },{ 0,1,0,0 } },
	{ { 14,0,0,0 },{ 0,0,0,0 },{ 0,0,1,0 },{ 1,1,1,0 } },
	{ { 15,0,0,0 },{ 1,0,0,0 },{ 1,0,0,0 },{ 1,1,0,0 } },
	{ { 16,0,0,0 },{ 0,0,0,0 },{ 0,1,0,0 },{ 1,1,1,0 } },
	{ { 17,0,0,0 },{ 1,0,0,0 },{ 1,1,0,0 },{ 1,0,0,0 } },
	{ { 18,0,0,0 },{ 0,0,0,0 },{ 1,1,1,0 },{ 0,1,0,0 } },
	{ { 19,0,0,0 },{ 0,1,0,0 },{ 1,1,0,0 },{ 0,1,0,0 } },
	{ { 20,0,0,0 },{ 0,0,0,0 },{ 1,1,0,0 },{ 0,1,1,0 } },
	{ { 21,0,0,0 },{ 0,1,0,0 },{ 1,1,0,0 },{ 1,0,0,0 } },
	{ { 22,0,0,0 },{ 0,0,0,0 },{ 0,1,1,0 },{ 1,1,0,0 } },
	{ { 23,0,0,0 },{ 1,0,0,0 },{ 1,1,0,0 },{ 0,1,0,0 } },
	{ { 24,0,0,0 },{ 0,0,0,0 },{ 1,1,1,0 },{ 0,0,1,0 } },
	{ { 25,0,0,0 },{ 0,1,0,0 },{ 0,1,0,0 },{ 1,1,0,0 } },
	{ { 26,0,0,0 },{ 0,0,0,0 },{ 1,0,0,0 },{ 1,1,1,0 } },
	{ { 27,0,0,0 },{ 1,1,0,0 },{ 1,0,0,0 },{ 1,0,0,0 } },
	{ { 28,0,0,0 },{ 0,0,0,0 },{ 1,1,0,0 },{ 1,1,0,0 } }
};
int i,j;

class map
{
public:
	int x,y;//地图位置
	int m[21][12];//地图状态
	
	void getp(int X,int Y)//地图初始化,0-空,1-方块 
	{
		x=X;y=Y;
		for(i=0;i<21;i++) for(j=0;j<12;j++) m[i][j]=1;
	    for(i=0;i<20;i++) for(j=1;j<11;j++) m[i][j]=0;
	}
	
}; 
	
class block
{
public:
	int x,y;//方块位置
	int b[4][4];//方块形状
	
	void getp(int X,int Y,int b1[4][4])//方块初始化 
	{
		x=X;y=Y;
		memcpy(b,b1,64);
	}
	
	void setcolor(int b[4][4])//设置方块颜色 
	{
		switch(b[0][0])
	    {
	    case 10:case 11:				SCT(hOut,FGRE);				break;
	    case 12:case 13:case 14:case 15:SCT(hOut,FBLU|FGRE|FINT);	break;
	    case 16:case 17:case 18:case 19:SCT(hOut,FRED|FGRE|FINT);	break;
	    case 20:case 21:				SCT(hOut,FGRE|FINT);		break;
	    case 22:case 23:				SCT(hOut,FBLU|FINT);		break;
	    case 24:case 25:case 26:case 27:SCT(hOut,FRED|FBLU|FINT);	break;
	    case 28:						SCT(hOut,FRED|FINT);		break;
	    default:
			break;
	    }
	}
	
	void print()//打印方块
	{
	    setcolor(b);
	    for(i=0;i<4;i++)
	    {
	        if(i+x<0) continue;
	        for(j=0;j<4;j++) if(b[i][j]==1) gotoXY(2*(y+j),x+i,"■");
	    }
	}
	
	void clear()//消除方块
	{
		for(i=0;i<4;i++)
	    {
	        if(i+x<0) continue;
	        for(j=0;j<4;j++) if(b[i][j]==1) gotoXY(2*(y+j),x+i,"  ");
		}
	}

};

class player
{
public:
	string name;//名字 
    int val;//用来控制下落速度
    int sco;//用来存储得分
    int cp;//用来存储关卡
	int times;
	bool ck;//检查方块还能不能下落
	map m;//地图
    block bA;//候选区方块 
    block bB;//下落中方块
	
	void getp(int X,int Y,int xa,int ya,int xb,int yb,int v,string na)
	{
		bA.getp(xa,ya,bs[0]);
		bB.getp(xb,yb,bs[0]);
		name=na;
		times=val=v;//50较慢，5较快 
		ck=true;
    	sco=0;
		cp=1;
		m.getp(X,Y);
	}
	
	bool collision(int x,int y,int b[4][4],map m)//检测碰撞
	{
		for(i=0;i<4;i++)
		for(j=0;j<4;j++)
		if(x+i>=m.x&&y+j>=m.y&&m.m[x+i-m.x][y+j-m.y]==1&&b[i][j]==1)
		return false;
		return true;
	}
	
	void Left()//左移
	{
	    if(collision(bB.x,bB.y-1,bB.b,m))
	    {
	        bB.clear();
	        --bB.y;
	    }
	}
	
	void Right()//右移
	{
	    if(collision(bB.x,bB.y+1,bB.b,m))
	    {
	        bB.clear();
	        ++bB.y;
	    }
	}
	
	void Up()//顺时针旋转90度
	{
		int h=0;
	    switch(bB.b[0][0])
	    {
	    case 10:h=1;break;
	    case 11:h=0;break;
	    case 12:h=3;break;
	    case 13:h=4;break;
	    case 14:h=5;break;
	    case 15:h=2;break;
	    case 16:h=7;break;
	    case 17:h=8;break;
	    case 18:h=9;break;
	    case 19:h=6;break;
	    case 20:h=11;break;
	    case 21:h=10;break;
	    case 22:h=13;break;
		case 23:h=12;break;
	    case 24:h=15;break;
	    case 25:h=16;break;
	    case 26:h=17;break;
	    case 27:h=14;break;
	    default:
			break;
	    }
	    if(collision(bB.x,bB.y,bs[h],m))
	    {
	        bB.clear();
	        memcpy(bB.b,bs[h],64);
	    }
	}
	
	int Down()//加速下落	
	{
	    if(collision(bB.x+1,bB.y,bB.b,m))
	    {
	        bB.clear();
	        ++bB.x;
	        return 0;
	    }
	    if(bB.x<0) return 2;
	    for(i=0;i<4;i++)
	    for(j=0;j<4;j++)
	    if(bB.b[i][j]==1)
	    {
	        m.m[bB.x+i-m.x][bB.y+j-m.y]=1;
	        SCT(hOut,FBLU|FGRE|FRED|FINT);
	        gotoXY(2*(bB.y+j),bB.x+i,"■");
	    }
	    return 1;
	}
	
	void roundBlock()//随机生成方块并打印到下一个方块位置
	{
	    bA.clear();
	    int k=rand()%19;
		memcpy(bA.b,bs[k],64);
	    bA.print();
	}

	void Stop()//游戏暂停 
	{
	    SCT(hOut,FRED|FINT);gotoXY(34,17,"游戏暂停");
	    while(true)
	    {
	    	int x=0;
	        char key=getch();
	        if(key==32)
	        {
	            gotoXY(34,17,"        ");
	    		x=1;
	        }
	        if(key==27) exit(0);
	        if(x==1) break;
	    }
	}
	
	int eli()//判断是否能消行并更新分值
	{
	    SCT(hOut,FBLU|FGRE|FRED|FINT);
	    int k=0;
		for(i=19;i>=0;i--)
	    {
	        int x=0;
	        for(j=1;j<11;j++) if(m.m[i][j]==0) break;
			if(j==11) x=1;
	        if(x==1)
	        {
	        	//更新分数关卡 
	            sco+=100;
	            if(val>5&&(sco/1000+1)!=cp)
	            {
	                cp=sco/1000+1;
	                val-=5;
	            }
	            //更新地图界面 
	            for(int l=i;l>0;l--) 
	            for(int n=1;n<11;n++)
	            m.m[l][n]=m.m[l-1][n];
	            for(int l=i;l>0;l--)
		        for(int n=1;n<11;n++)
		        {
		            gotoxy(2*(n+m.y),l+m.x);
	                if(m.m[l][n]==1) cout << "■";
	                else cout << "  ";
	            }
	            i++;
				k++;
	        }
	    }
	    gotoxy(36+m.y/2,2);cout<<sco;
	    gotoxy(36+m.y/2,3);cout<<cp;
	    return k;
	}

	void ali()//底部增行 
	{
		for(i=0;i<19;i++) 
	    for(j=1;j<11;j++)
	    m.m[i][j]=m.m[i+1][j];
	    for(i=0;i<19;i++) 
	    for(j=1;j<11;j++)
	    {
	        gotoxy(2*j+m.y*2,i);
	        if(m.m[i][j]==1) cout << "■";
	        else cout << "  ";
	    }
	    for(j=1;j<11;j++)//增行 
	    {
	    	gotoxy(2*j+m.y*2,i);
	    	int k=rand()%100;
	    	m.m[i][j]=k>40?1:0;
	    	if(k>40) cout << "■";
			else cout << "  ";
		}
	}

	void gameOver()//游戏结束
	{
	    SCT(hOut,FRED|FINT);
	    gotoxy(34,17);cout<<name<<"失败";
    	gotoXY(34,18,"空格键：重来");
    	gotoXY(34,19,"Esc键 ：退出");
	    while(true)
	    {
	        char key= _getch();
	        if (key == 32) return;
	        if (key == 27) exit(0);
	    }
	}
	
};

int main()
{
    srand(time(NULL));
    initialWindow();
    player p1;
    player p2;
initial:
    p1.getp(0,0 ,5,15,-3,4 ,50,"玩家1");
    p2.getp(0,28,5,22,-3,32,50,"玩家2");
    initialPrint();
    p1.roundBlock();
    p2.roundBlock();
    while (true)
    {
    	p1.bB.print();
        p2.bB.print();
        if(p1.ck)
        {
			int q=p1.eli();
			for(;q>0;q--) p2.ali();
            p1.ck = false;
            p1.bB.x = -3;
            p1.bB.y =  4;
            if (p1.collision(p1.bB.x,p1.bB.y,p1.bA.b,p1.m))
            {
                memcpy(p1.bB.b,p1.bA.b,64);
                p1.roundBlock();
            }
            else
            {
                p1.gameOver();
                goto initial;
            }
        }
        
        if(p2.ck)
        {
			int q=p2.eli();
			for(;q>0;q--) p1.ali();
            p2.ck = false;
            p2.bB.x = -3;
            p2.bB.y = 32;
            if (p2.collision(p2.bB.x,p2.bB.y,p2.bA.b,p2.m))
            {
                memcpy(p2.bB.b,p2.bA.b,64);
                p2.roundBlock();
            }
            else
            {
                p2.gameOver();
                goto initial;
            }
        }
        
        if (_kbhit())
        {
            char key = _getch();
            switch (key)
            {
            case 119:p1.Up();	break;
            case 72 :p2.Up();	break;    
            case 97 :p1.Left();	break;
            case 75 :p2.Left();	break;
            case 100:p1.Right();break;
            case 77 :p2.Right();break;
            case 115:
                switch (p1.Down())
                {
                case 0:p1.ck = false;break;
                case 1:p1.ck = true;break;
                case 2:p1.gameOver();goto initial;
                default:
					break;
                }
                break;
            case 80:
                switch (p2.Down())
                {
                case 0:p2.ck = false;break;
                case 1:p2.ck = true;break;
                case 2:p2.gameOver();goto initial;
                default:
					break;
                }
                break;
            case 32:p1.Stop();break;
            case 27:exit(0);
            default:
				break;
            }
        }
        
        Sleep(20);
        
        if(0 == --p1.times)
        {
            switch (p1.Down())
            {
            case 0:p1.ck = false;break;
            case 1:p1.ck = true;break;
            case 2:p1.gameOver();goto initial;
            default:break;
            }
            p1.times = p1.val;
        }
        
        if(0 == --p2.times)
        {
            switch (p2.Down())
            {
            case 0:p2.ck = false;break;
            case 1:p2.ck = true;break;
            case 2:p2.gameOver();goto initial;
            default:break;
            }
            p2.times = p2.val;
        }
    }
    
    cin.get();
    return 0;
}

void gotoxy(int x, int y)
{
    COORD pos;
    pos.X = x;
    pos.Y = y;
    SetConsoleCursorPosition(hOut,pos);
}

void gotoXY(int x, int y,string s1)
{
    COORD pos;
    pos.X = x;
    pos.Y = y;
    SetConsoleCursorPosition(hOut,pos);
    cout<<s1;//
}

void initialWindow()
{
    SetConsoleTitle("我罗斯");
    COORD size = { 84, 25 };
    SetConsoleScreenBufferSize(hOut, size);
    SMALL_RECT rc = { 0, 0, 83, 24 };
    SetConsoleWindowInfo(hOut, true, &rc);
    CONSOLE_CURSOR_INFO cursor_info = { 1, 0 };
    SetConsoleCursorInfo(hOut, &cursor_info);
}

void initialPrint()
{
	SCT(hOut,FRED|FGRE|FBLU);
	gotoxy(0,0);for(i=0;i<25;i++)
	cout <<"                                                                                 " <<endl;
    gotoxy(0,0);for(i=0;i<20;i++)
    cout << "■                    ■☆                            ☆■                    ■" << endl;
    gotoXY(26,0,"☆☆☆☆☆☆☆☆☆☆☆☆☆☆");
    gotoxy(0 ,20);
    cout << "■■■■■■■■■■■■☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆■■■■■■■■■■■■";
    gotoXY(26, 2,"分  数：      ");
    gotoXY(26, 3,"关  卡：      ");
    gotoXY(40, 2,"分  数：      ");
    gotoXY(40, 3,"关  卡：      ");
    gotoXY(26, 4,"下一方块：");
    gotoXY(40, 4,"下一方块：");
    gotoXY(26, 9,"操作方法：");
    gotoXY(30, 11,"玩家 1：w a s d ");
    gotoXY(30, 12,"玩家 2：↑←↓→");
    gotoXY(30, 13,"空格键：开始/暂停");
    gotoXY(30, 14,"Esc 键：退出");
    SCT(hOut,FGRE);gotoXY(26, 1,"玩家1");
    SCT(hOut,FRED);gotoXY(40, 1,"玩家2");
}
